CCS PCM C Compiler, Version 5.007, 61971               20-out-25 22:00

               Filename:   C:\Desenvolvimento\ap2-mcdsp\main.lst

               ROM used:   352 words (4%)
                           Largest free fragment is 2048
               RAM used:   16 (4%) at main() level
                           23 (6%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   10F
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.0
001A:  GOTO   01D
001B:  BTFSC  0C.0
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   03F
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0031:  BCF    0A.0
0032:  BCF    0A.1
0033:  BCF    0A.2
0034:  ADDWF  02,F
0035:  RETLW  3F
0036:  RETLW  06
0037:  RETLW  5B
0038:  RETLW  4F
0039:  RETLW  66
003A:  RETLW  6D
003B:  RETLW  7D
003C:  RETLW  07
003D:  RETLW  7F
003E:  RETLW  6F
*
0064:  MOVF   2F,W
0065:  CLRF   78
0066:  SUBWF  2E,W
0067:  BTFSC  03.0
0068:  GOTO   06C
0069:  MOVF   2E,W
006A:  MOVWF  77
006B:  GOTO   078
006C:  CLRF   77
006D:  MOVLW  08
006E:  MOVWF  30
006F:  RLF    2E,F
0070:  RLF    77,F
0071:  MOVF   2F,W
0072:  SUBWF  77,W
0073:  BTFSC  03.0
0074:  MOVWF  77
0075:  RLF    78,F
0076:  DECFSZ 30,F
0077:  GOTO   06F
0078:  RETURN
*
009C:  MOVF   2C,W
009D:  ANDLW  07
009E:  MOVWF  77
009F:  RRF    2C,W
00A0:  MOVWF  78
00A1:  RRF    78,F
00A2:  RRF    78,F
00A3:  MOVLW  1F
00A4:  ANDWF  78,F
00A5:  MOVF   78,W
00A6:  ADDWF  2E,W
00A7:  MOVWF  04
00A8:  BCF    03.7
00A9:  BTFSC  2F.0
00AA:  BSF    03.7
00AB:  CLRF   78
00AC:  INCF   78,F
00AD:  INCF   77,F
00AE:  GOTO   0B0
00AF:  RLF    78,F
00B0:  DECFSZ 77,F
00B1:  GOTO   0AF
00B2:  MOVF   2D,F
00B3:  BTFSC  03.2
00B4:  GOTO   0B8
00B5:  MOVF   78,W
00B6:  IORWF  00,F
00B7:  GOTO   0BB
00B8:  COMF   78,F
00B9:  MOVF   78,W
00BA:  ANDWF  00,F
00BB:  RETURN
00BC:  MOVF   2C,W
00BD:  ANDLW  07
00BE:  MOVWF  77
00BF:  RRF    2C,W
00C0:  MOVWF  78
00C1:  RRF    78,F
00C2:  RRF    78,F
00C3:  MOVLW  1F
00C4:  ANDWF  78,F
00C5:  MOVF   78,W
00C6:  ADDWF  2D,W
00C7:  MOVWF  04
00C8:  BCF    03.7
00C9:  BTFSC  2E.0
00CA:  BSF    03.7
00CB:  MOVF   00,W
00CC:  MOVWF  78
00CD:  INCF   77,F
00CE:  GOTO   0D0
00CF:  RRF    78,F
00D0:  DECFSZ 77,F
00D1:  GOTO   0CF
00D2:  RETURN
....................  
.................... #list 
....................  
.................... #fuses NOWDT, HS, NOPROTECT, NOLVP 
.................... #use delay(clock=4000000)  // Clock de 4 MHz 
00D3:  MOVLW  2C
00D4:  MOVWF  04
00D5:  BCF    03.7
00D6:  MOVF   00,W
00D7:  BTFSC  03.2
00D8:  GOTO   0E7
00D9:  MOVLW  01
00DA:  MOVWF  78
00DB:  CLRF   77
00DC:  DECFSZ 77,F
00DD:  GOTO   0DC
00DE:  DECFSZ 78,F
00DF:  GOTO   0DB
00E0:  MOVLW  4A
00E1:  MOVWF  77
00E2:  DECFSZ 77,F
00E3:  GOTO   0E2
00E4:  GOTO   0E5
00E5:  DECFSZ 00,F
00E6:  GOTO   0D9
00E7:  RETURN
....................  
.................... // --- Mapeamento dos botões --- 
.................... #define BTN_START_STOP  PIN_B0 
.................... #define BTN_RESUME      PIN_B1 
.................... #define BTN_RESET       PIN_B2 
....................  
.................... // --- Variáveis globais --- 
.................... int8 segundos = 0; 
.................... int1 rodando = 0;     // Flag: 1 = contando, 0 = pausado 
.................... int8 post_scaler = 0; // *NOVO* Contador para 1 segundo 
....................  
.................... // --- Tabela para display de 7 segmentos (cátodo comum) --- 
.................... const int8 tabela_7seg[10] = { 
....................     0b00111111, // 0 
....................     0b00000110, // 1 
....................     0b01011011, // 2 
....................     0b01001111, // 3 
....................     0b01100110, // 4 
....................     0b01101101, // 5 
....................     0b01111101, // 6 
....................     0b00000111, // 7 
....................     0b01111111, // 8 
....................     0b01101111  // 9 
.................... }; 
....................  
.................... // --- Interrupção do Timer1 (agora a cada 100ms) --- 
.................... #int_TIMER1 
.................... void timer1_isr() { 
....................      
....................     post_scaler++; // Incrementa o contador de 100ms 
*
003F:  INCF   29,F
....................      
....................     // Se 10 interrupções de 100ms passaram (= 1 segundo) 
....................     if (post_scaler == 10) { 
0040:  MOVF   29,W
0041:  SUBLW  0A
0042:  BTFSS  03.2
0043:  GOTO   04C
....................         post_scaler = 0; // Zera o contador 
0044:  CLRF   29
....................          
....................         if (rodando) { 
0045:  BTFSS  28.0
0046:  GOTO   04C
....................             segundos++; 
0047:  INCF   27,F
....................             if (segundos > 99) 
0048:  MOVF   27,W
0049:  SUBLW  63
004A:  BTFSS  03.0
....................                 segundos = 0; 
004B:  CLRF   27
....................         } 
....................     } 
....................      
....................     // *CORRIGIDO* Recarrega o Timer1 para +100ms 
....................     set_timer1(53036);   
004C:  CLRF   0E
004D:  MOVLW  CF
004E:  MOVWF  0F
004F:  MOVLW  2C
0050:  MOVWF  0E
0051:  BCF    0C.0
0052:  BCF    0A.3
0053:  BCF    0A.4
0054:  GOTO   01D
.................... } 
....................  
.................... // --- Configuração do Timer1 --- 
.................... void timer1_config() { 
....................     setup_timer_1(T1_INTERNAL | T1_DIV_BY_8);  // Clock interno, prescaler 1:8 
0055:  MOVLW  B5
0056:  MOVWF  10
....................      
....................     // *CORRIGIDO* Valor para 100ms (65536 - 12500) 
....................     set_timer1(53036);   
0057:  CLRF   0E
0058:  MOVLW  CF
0059:  MOVWF  0F
005A:  MOVLW  2C
005B:  MOVWF  0E
....................     enable_interrupts(INT_TIMER1); 
005C:  BSF    03.5
005D:  BSF    0C.0
....................     enable_interrupts(GLOBAL); 
005E:  MOVLW  C0
005F:  BCF    03.5
0060:  IORWF  0B,F
0061:  BCF    0A.3
0062:  BCF    0A.4
0063:  GOTO   131 (RETURN)
.................... } 
....................  
.................... // --- Função para exibir valor nos dois displays --- 
.................... void exibir_display(int8 valor) { 
*
0079:  MOVF   2B,W
007A:  MOVWF  2E
007B:  MOVLW  0A
007C:  MOVWF  2F
007D:  CALL   064
007E:  MOVF   78,W
007F:  MOVWF  2C
0080:  MOVF   2B,W
0081:  MOVWF  2E
0082:  MOVLW  0A
0083:  MOVWF  2F
0084:  CALL   064
0085:  MOVF   77,W
0086:  MOVWF  2D
....................     int8 dezena = valor / 10; 
....................     int8 unidade = valor % 10; 
....................  
....................     // Exibe nos displays (Se os números parecerem errados,  
....................     // seu PORTC e PORTD podem estar trocados. 
....................     // Tente inverter as duas linhas abaixo) 
....................     output_c(tabela_7seg[dezena]);   // Porta C -> dezenas 
0087:  MOVF   2C,W
0088:  CALL   031
0089:  MOVWF  2E
008A:  MOVLW  00
008B:  MOVWF  2A
008C:  BSF    03.5
008D:  CLRF   07
008E:  BCF    03.5
008F:  MOVF   2E,W
0090:  MOVWF  07
....................     output_d(tabela_7seg[unidade]); // Porta D -> unidades 
0091:  MOVF   2D,W
0092:  CALL   031
0093:  MOVWF  2E
0094:  BSF    03.5
0095:  CLRF   08
0096:  BCF    03.5
0097:  MOVF   2E,W
0098:  MOVWF  08
0099:  BCF    0A.3
009A:  BCF    0A.4
009B:  GOTO   134 (RETURN)
.................... } 
....................  
.................... // --- Leitura dos botões (com debounce simples) --- 
.................... int1 botao_pressionado(int pin) { 
....................     if (!input(pin)) {    // Botão ativo em nível baixo 
*
00E8:  MOVF   2B,W
00E9:  MOVWF  2C
00EA:  MOVLW  01
00EB:  MOVWF  2D
00EC:  CLRF   2F
00ED:  MOVLW  80
00EE:  MOVWF  2E
00EF:  CALL   09C
00F0:  MOVF   2B,W
00F1:  MOVWF  2C
00F2:  CLRF   2E
00F3:  CLRF   2D
00F4:  CALL   0BC
00F5:  BTFSC  78.0
00F6:  GOTO   10C
....................         delay_ms(20);     // Debounce 
00F7:  MOVLW  14
00F8:  MOVWF  2C
00F9:  CALL   0D3
....................         if (!input(pin)) 
00FA:  MOVF   2B,W
00FB:  MOVWF  2C
00FC:  MOVLW  01
00FD:  MOVWF  2D
00FE:  CLRF   2F
00FF:  MOVLW  80
0100:  MOVWF  2E
0101:  CALL   09C
0102:  MOVF   2B,W
0103:  MOVWF  2C
0104:  CLRF   2E
0105:  CLRF   2D
0106:  CALL   0BC
0107:  BTFSC  78.0
0108:  GOTO   10C
....................             return 1; 
0109:  MOVLW  01
010A:  MOVWF  78
010B:  GOTO   10E
....................     } 
....................     return 0; 
010C:  MOVLW  00
010D:  MOVWF  78
010E:  RETURN
.................... } 
....................  
.................... // --- Programa principal --- 
.................... void main() { 
010F:  CLRF   27
0110:  BCF    28.0
0111:  CLRF   29
0112:  MOVLW  FF
0113:  MOVWF  2A
0114:  BSF    03.5
0115:  BSF    1F.0
0116:  BSF    1F.1
0117:  BSF    1F.2
0118:  BCF    1F.3
0119:  MOVLW  07
011A:  MOVWF  1C
011B:  BCF    03.7
011C:  MOVLW  1F
011D:  ANDWF  03,F
....................     // Configura portas 
....................     set_tris_b(0b00000111);  // RB0, RB1, RB2 = entradas (botões) 
011E:  MOVLW  07
011F:  MOVWF  06
....................     set_tris_c(0x00);        // PORTC = saída (display dezenas) 
0120:  MOVLW  00
0121:  MOVWF  07
0122:  BCF    03.5
0123:  MOVWF  2A
....................     set_tris_d(0x00);        // PORTD = saída (display unidades) 
0124:  BSF    03.5
0125:  MOVWF  08
....................  
....................     output_c(0); 
0126:  BCF    03.5
0127:  MOVWF  2A
0128:  BSF    03.5
0129:  CLRF   07
012A:  BCF    03.5
012B:  CLRF   07
....................     output_d(0); 
012C:  BSF    03.5
012D:  CLRF   08
012E:  BCF    03.5
012F:  CLRF   08
....................  
....................     timer1_config(); 
0130:  GOTO   055
....................  
....................     while(TRUE) { 
....................         // Atualiza o display constantemente 
....................         exibir_display(segundos); 
0131:  MOVF   27,W
0132:  MOVWF  2B
0133:  GOTO   079
....................  
....................         // START/STOP 
....................         if (botao_pressionado(BTN_START_STOP)) { 
0134:  MOVLW  30
0135:  MOVWF  2B
0136:  CALL   0E8
0137:  MOVF   78,F
0138:  BTFSC  03.2
0139:  GOTO   141
....................             rodando = !rodando;     // Alterna entre rodando e pausado 
013A:  MOVLW  01
013B:  XORWF  28,F
....................             while(!input(BTN_START_STOP));  // Espera soltar 
013C:  BSF    03.5
013D:  BSF    06.0
013E:  BCF    03.5
013F:  BTFSS  06.0
0140:  GOTO   13C
....................         } 
....................  
....................         // RESUME 
....................         if (botao_pressionado(BTN_RESUME)) { 
0141:  MOVLW  31
0142:  MOVWF  2B
0143:  CALL   0E8
0144:  MOVF   78,F
0145:  BTFSC  03.2
0146:  GOTO   14D
....................             rodando = 1;            // Continua a contagem 
0147:  BSF    28.0
....................             while(!input(BTN_RESUME)); 
0148:  BSF    03.5
0149:  BSF    06.1
014A:  BCF    03.5
014B:  BTFSS  06.1
014C:  GOTO   148
....................         } 
....................  
....................         // RESET 
....................         if (botao_pressionado(BTN_RESET)) { 
014D:  MOVLW  32
014E:  MOVWF  2B
014F:  CALL   0E8
0150:  MOVF   78,F
0151:  BTFSC  03.2
0152:  GOTO   15B
....................             segundos = 0; 
0153:  CLRF   27
....................             rodando = 0;            // Pausa após reset 
0154:  BCF    28.0
....................             post_scaler = 0;        // Zera o contador de 100ms também 
0155:  CLRF   29
....................             while(!input(BTN_RESET)); 
0156:  BSF    03.5
0157:  BSF    06.2
0158:  BCF    03.5
0159:  BTFSS  06.2
015A:  GOTO   156
....................         } 
....................  
....................         // Não precisa de um delay grande aqui, mas  
....................         // um pequeno ajuda a estabilizar a leitura dos botões. 
....................         delay_ms(20); 
015B:  MOVLW  14
015C:  MOVWF  2C
015D:  CALL   0D3
015E:  GOTO   131
....................     } 
.................... } 
015F:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
